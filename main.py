import json
import sys
import os
from pathlib import Path

import pandas as pd
import camelot
import cv2
from tabulate import tabulate

from PyQt6 import QtGui, QtCore
from PyQt6.QtWidgets import QMessageBox, QApplication, QLabel, QMainWindow, QPushButton, QLineEdit, QVBoxLayout, QWidget, QFileDialog

from PyQt6.QtGui import QGuiApplication, QWindow
from PyQt6.QtQml import QQmlApplicationEngine
from PyQt6.QtQuick import QQuickWindow
from PyQt6.QtCore import Qt 

class Window(QMainWindow):

    line_edit=""

    def __init__(self):
        super().__init__()
        self.setMinimumSize(100,100)
        
        btn = QPushButton("Select a Landauer Report PDF")
        aside = QLabel("'Landauer Report PDFs' in this case refer to \n documents generated by logging into your Landauer Portal, \n selecting a dose report, and selecting print.")
        monPer = QLabel("Please enter the monitoring quarter! \n e.g. '1', '2', etc")
        saveFileInstructions = QLabel("Please Choose a Save File Name: \n default is sampleLandauer, do not include a file extension or \n special charecters.")
        saveFileName = QLineEdit(parent=self)
        monitoringPeriod = QLineEdit(parent=self)
        Window.line_edit=saveFileName
        Window.line_edit2=monitoringPeriod

        layout = QVBoxLayout()
        layout.addWidget(saveFileInstructions)
        layout.addWidget(saveFileName)
        layout.addWidget(monPer)
        layout.addWidget(monitoringPeriod)
        layout.addWidget(btn)
        layout.addWidget(aside)

        guiDisplay = QWidget()
        guiDisplay.setLayout(layout)

        self.setCentralWidget(guiDisplay)
        self.setMinimumSize(400,100)
        self.setWindowTitle("Landauer Report Processor")

        btn.clicked.connect(self.clickHandler)

        # set app icon    
        base_dir = os.path.dirname(__file__)
        file_path = os.path.join(base_dir, '.GUI/icons/16x16.png')
        app_icon = QtGui.QIcon()
        app_icon.addFile(os.path.join(base_dir, '.GUI/icons/16x16.png'), QtCore.QSize(16,16))
        app_icon.addFile(os.path.join(base_dir, '.GUI/icons/24x24.png'), QtCore.QSize(24,24))
        app_icon.addFile(os.path.join(base_dir, '.GUI/icons/32x32.png'), QtCore.QSize(32,32))
        app_icon.addFile(os.path.join(base_dir, '.GUI/icons/48x48.png'), QtCore.QSize(48,48))
        app_icon.addFile(os.path.join(base_dir, '.GUI/icons/256x256.png'), QtCore.QSize(256,256))
        app.setWindowIcon(app_icon)

    def clickHandler(self):

        dialog = QFileDialog(self)
        dialog.setNameFilter("PDF Files (*.pdf)")
        dialog.setFileMode(QFileDialog.FileMode.ExistingFile)
        dialogSucessful = dialog.exec()

        if dialogSucessful == 1:

            if Window.line_edit2.text() != "1" and Window.line_edit2.text() != "2" and Window.line_edit2.text() != "3" and Window.line_edit2.text() != "4":
                msgBox = QMessageBox()
                msgBox.setText("Please enter only the quarter number for the monitering period! No spaces or other charecters.")
                msgBox.exec()
                print(str(1/0))
            
            selectedFiles = dialog.selectedFiles()

            allTables=camelot.read_pdf(selectedFiles[0], flavor="stream", pages="all")
            
            filecollect = []
            for file in allTables:
                if "Annual Radiation Exposure" in file.df.iat[0, 0]:
                    continue
                elif "LANDAUER" in file.df.iat[4, 7]:
                    continue
                else:
                    print(file.df)
                    newtab = []
                    for y in range(0, file.df.shape[0]):
                        row = []
                        for x in range(0, file.df.shape[1]):
                            lineBreak = file.df.iat[y, x].split('\n')
                            for i in range(0, len(lineBreak)):
                                row.append(lineBreak[i])
                        newtab.append(row)
                    filecollect.append(newtab)

            Period = "QUARTER " + Window.line_edit2.text()
            
            currentID = 0
            personel = {}
            useName = ""
            use = {"Type": "", "DDE": "", "LDE": "", "SDE": ""}
            collect = False

            readNote = False
            lastEntry = ["",""]

            for f in range(0, len(filecollect)):
                for r in range(0, len(filecollect[f])):
                    for c in range(0, len(filecollect[f][r])):

                        if filecollect[f][r][c] == Period:
                            collect = True
                        if "QUARTER" in filecollect[f][r][c] and filecollect[f][r][c] != Period:
                            collect = False
                        
                        if not collect:
                            continue

                        if c==0 and filecollect[f][r][c].isnumeric() and len(filecollect[f][r][c]) == 5:
                            currentID = filecollect[f][r][c]
                        elif "Pa" in filecollect[f][r][c] or "Ja" in filecollect[f][r][c] or "S" == filecollect[f][r][c]:
                            use["Type"] = filecollect[f][r][c]
                        elif "CHEST" in filecollect[f][r][c] or "AREA" in filecollect[f][r][c] or "LFINGR" in filecollect[f][r][c] or "RFINGR" in filecollect[f][r][c]:
                            useName = filecollect[f][r][c]
                        elif "NOTE" in filecollect[f][r][c]:
                            readNote = True
                        elif readNote and "ABSENT" in filecollect[f][r][c]:
                            personel[lastEntry[0]][lastEntry[1]]["DDE"] = "A"
                            personel[lastEntry[0]][lastEntry[1]]["LDE"] = "A"
                            personel[lastEntry[0]][lastEntry[1]]["SDE"] = "A"
                        elif readNote and "Unused" in filecollect[f][r][c]:
                            personel[lastEntry[0]][lastEntry[1]]["DDE"] = "M"
                            personel[lastEntry[0]][lastEntry[1]]["LDE"] = "M"
                            personel[lastEntry[0]][lastEntry[1]]["SDE"] = "M"
                        elif use["Type"] != "" and useName != "" and (filecollect[f][r][c] == "M" or filecollect[f][r][c].isnumeric()):
                            if use["DDE"] == "" and not "FINGR" in useName:
                                use["DDE"] = filecollect[f][r][c]
                            elif use["LDE"] == "" and not "FINGR" in useName:
                                use["LDE"] = filecollect[f][r][c]
                            elif use["SDE"] == "":
                                use["SDE"] = filecollect[f][r][c]
                    if int(currentID) != 0 and useName != "" and use["Type"] != "":
                        if not str(currentID).lstrip("0") in personel:
                            personel[str(currentID).lstrip("0")] = {}
                        personel[str(currentID).lstrip("0")][str(useName)] = use
                        lastEntry = [str(currentID).lstrip("0"),str(useName)]
                    #reset
                    useName = ""
                    use = {"Type": "", "DDE": "", "LDE": "", "SDE": ""}

            personelDict = []

            for id in personel.keys():
                appendEntry = personel[id]
                appendEntry["number"] = id
                personelDict.append(appendEntry)

            jsonOutDict = {"personel": personelDict}
            jsonOutCorrectedDict = ""
            if Window.line_edit.text() != "":
                jsonOutName = Window.line_edit.text() + ".json"
            else:
                jsonOutName = "sampleLandauer.json"

            WriteLocation = Path.home() / 'Downloads' / str(jsonOutName)

            with open(WriteLocation, "a") as outfile: 
                json.dump(jsonOutDict, outfile)
        else:
            doNothing = True

app = QApplication([])
app.setApplicationName("Landauer Report processor")
window = Window()

window.show()   
sys.exit(app.exec())