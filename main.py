import json
import sys
import os
import logging  
logging.basicConfig(filename='myapp.log', level=logging.INFO)

import pandas as pd
import camelot
import cv2
import jpype
from tabulate import tabulate

from PyQt6 import QtGui, QtCore
from PyQt6.QtWidgets import QMessageBox, QApplication, QLabel, QMainWindow, QPushButton, QLineEdit, QVBoxLayout, QWidget, QFileDialog

from PyQt6.QtGui import QGuiApplication, QWindow
from PyQt6.QtQml import QQmlApplicationEngine
from PyQt6.QtQuick import QQuickWindow
from PyQt6.QtCore import Qt 

class Window(QMainWindow):

    line_edit=""

    def __init__(self):
        super().__init__()
        self.setMinimumSize(100,100)
        
        btn = QPushButton("Select a Landauer Report PDF")
        aside = QLabel("'Landauer Report PDFs' in this case refer to \n documents generated by logging into your Landauer Portal, \n selecting a dose report, and selecting print.")
        monPer = QLabel("Please enter the monitoring quarter! \n e.g. '1', '2', etc")
        saveFileInstructions = QLabel("Please Choose a Save File Name: \n default is sampleLandauer, do not include a file extension or \n special charecters.")
        saveFileName = QLineEdit(parent=self)
        monitoringPeriod = QLineEdit(parent=self)
        Window.line_edit=saveFileName
        Window.line_edit2=monitoringPeriod

        layout = QVBoxLayout()
        layout.addWidget(saveFileInstructions)
        layout.addWidget(saveFileName)
        layout.addWidget(monPer)
        layout.addWidget(monitoringPeriod)
        layout.addWidget(btn)
        layout.addWidget(aside)

        guiDisplay = QWidget()
        guiDisplay.setLayout(layout)

        self.setCentralWidget(guiDisplay)
        self.setMinimumSize(400,100)
        self.setWindowTitle("Landauer Report Processor")

        btn.clicked.connect(self.clickHandler)

        # set app icon    
        base_dir = os.path.dirname(__file__)
        file_path = os.path.join(base_dir, '.GUI/icons/16x16.png')
        app_icon = QtGui.QIcon()
        app_icon.addFile(os.path.join(base_dir, '.GUI/icons/16x16.png'), QtCore.QSize(16,16))
        app_icon.addFile(os.path.join(base_dir, '.GUI/icons/24x24.png'), QtCore.QSize(24,24))
        app_icon.addFile(os.path.join(base_dir, '.GUI/icons/32x32.png'), QtCore.QSize(32,32))
        app_icon.addFile(os.path.join(base_dir, '.GUI/icons/48x48.png'), QtCore.QSize(48,48))
        app_icon.addFile(os.path.join(base_dir, '.GUI/icons/256x256.png'), QtCore.QSize(256,256))
        app.setWindowIcon(app_icon)

    def clickHandler(self):
        try:
            logger = logging.getLogger("report processor")
        except:
            msgBox = QMessageBox()
            msgBox.setText("Ruh Roh.")
            msgBox.exec()
    
        logger.info('Initialized -------------------------------------------- #')

        dialog = QFileDialog(self)
        dialog.setNameFilter("PDF Files (*.pdf)")
        dialog.setFileMode(QFileDialog.FileMode.ExistingFile)
        dialogSucessful = dialog.exec()

        if dialogSucessful == 1:

            logger.info('Dialog Sucessful')

            if Window.line_edit2.text() != "1" and Window.line_edit2.text() != "2" and Window.line_edit2.text() != "3" and Window.line_edit2.text() != "4":
                msgBox = QMessageBox()
                msgBox.setText("Please enter only the quarter number for the monitering period! No spaces or other charecters.")
                #print(Window.line_edit2.text())
                msgBox.exec()
                print(str(1/0))
            
            selectedFiles = dialog.selectedFiles()

            allTables=camelot.read_pdf(selectedFiles[0], flavor="stream", pages="all")
            
            logger.info('Camelot Parse Sucessful')
            logger.info('Pages Parsed: ' + str(len(allTables)))

            filecollect = []
            for file in allTables:
                if "Annual Radiation Exposure" in file.df.iat[0, 0]:
                    logger.info('Last Page')
                    continue
                elif "LANDAUER" in file.df.iat[4, 7]:
                    logger.info('Top Matter')
                    #print(file.df)
                    continue
                else:
                    #print(file.df)
                    newtab = []
                    for y in range(0, file.df.shape[0]-1):
                        row = []
                        for x in range(0, file.df.shape[1]-1):
                            #print("Checking y: " + str(y) + "/" + str(file.df.shape[1]-1) + " and x: " + str(x) + "/" + str(file.df.shape[0]-1))
                            lineBreak = file.df.iat[y, x].split('\n')
                            for i in range(0, len(lineBreak)):
                                row.append(lineBreak[i])
                        newtab.append(row)
                    logger.info('Collected a File')
                    filecollect.append(newtab)

            logger.info('Table Collection Sucessful')

            Period = "QUARTER " + Window.line_edit2.text()
            
            Mode = 0
            currentID = 0
            personelDict = []
            personel = {"number": 0}
            useName = ""
            use = {"Type": "", "DDE": "", "LDE": "", "SDE": ""}
            # 0: Looking for Monitoring Period
            # 1: Looking for ID
            # 2: Looking for Dosimeter
            # 3: Looking for Use
            # 4, 5, 6: Looking for DDE, LDE, and SDE
            # -1: Outside of Monitoring Period

            logger.info('Searching for Personel Info')

            for f in range(0, len(filecollect)):
                for r in range(0, len(filecollect[f])):
                    for c in range(0, len(filecollect[f][r])):
                        if Mode != -1 and Mode != 0 and filecollect[f][r][c] != Period and "QUARTER" in filecollect[f][r][c]:
                            personelDict.append(personel)
                            Mode = -1
                        if Mode == 0:
                            if filecollect[f][r][c] == Period:
                                Mode = 1
                        elif Mode == 1:
                            if c == 0 and "0" in filecollect[f][r][c]:
                                Mode = 2
                                currentID = filecollect[f][r][c]
                                personel["number"] = currentID
                        elif Mode == 2:
                            if "Pa" in filecollect[f][r][c] or "Ja" in filecollect[f][r][c] or "S" in filecollect[f][r][c]:
                                Mode = 3
                                use["Type"] = filecollect[f][r][c]
                            elif c == 0 and "0" in filecollect[f][r][c]:
                                personelDict.append(personel)
                                personel = {"number": 0}
                                useName = ""
                                use = {"Type": "", "DDE": "", "LDE": "", "SDE": ""}
                                Mode = 2
                                currentID = filecollect[f][r][c]
                                personel["number"] = currentID
                        elif Mode == 3:
                            if "CHEST" in filecollect[f][r][c] or "AREA" in filecollect[f][r][c] or "LFINGR" in filecollect[f][r][c] or "RFINGR" in filecollect[f][r][c]:
                                Mode = 4
                                useName = filecollect[f][r][c]
                        elif Mode == 4:
                            if filecollect[f][r][c] != "":
                                Mode = 5
                                use["DDE"] = filecollect[f][r][c]
                        elif Mode == 5:
                            if filecollect[f][r][c] != "":
                                Mode = 6
                                use["LDE"] = filecollect[f][r][c]
                        elif Mode == 6:
                            if filecollect[f][r][c] != "":
                                Mode = 2
                                use["SDE"] = filecollect[f][r][c]
                                personel[useName] = use
                        

            logger.info('Personel Info Collected.')

            jsonOutDict = {"personel": personelDict}
            jsonOutCorrectedDict = ""
            if Window.line_edit.text() != "":
                jsonOutName = Window.line_edit.text() + ".json"
            else:
                jsonOutName = "sampleLandauer.json"
            

            logger.info('Writing File ' + str(jsonOutName))

            with open(jsonOutName, "w") as outfile: 
                json.dump(jsonOutDict, outfile)
            with open(jsonOutName, "r") as checkfile:
                jsonOutCorrectedString = checkfile.read().replace(": NaN", ": '??'")
                jsonOutCorrectedDict = eval(jsonOutCorrectedString)
            with open(jsonOutName, "w") as outfile: 
                json.dump(jsonOutCorrectedDict, outfile)
        else:
            doNothing = True

        logger.info('File Writen.')

app = QApplication([])
app.setApplicationName("Landauer Report processor")
window = Window()

window.show()   
sys.exit(app.exec())